/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as SettingsRouteImport } from "./routes/settings";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AuthStudentIdRouteImport } from "./routes/auth/student-id";
import { Route as AuthPasswordRouteImport } from "./routes/auth/password";
import { Route as AuthInitSettingRouteImport } from "./routes/auth/init-setting";
import { Route as AuthGoogleAuthRouteImport } from "./routes/auth/google-auth";

const SettingsRoute = SettingsRouteImport.update({
	id: "/settings",
	path: "/settings",
	getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRouteImport,
} as any);
const AuthStudentIdRoute = AuthStudentIdRouteImport.update({
	id: "/auth/student-id",
	path: "/auth/student-id",
	getParentRoute: () => rootRouteImport,
} as any);
const AuthPasswordRoute = AuthPasswordRouteImport.update({
	id: "/auth/password",
	path: "/auth/password",
	getParentRoute: () => rootRouteImport,
} as any);
const AuthInitSettingRoute = AuthInitSettingRouteImport.update({
	id: "/auth/init-setting",
	path: "/auth/init-setting",
	getParentRoute: () => rootRouteImport,
} as any);
const AuthGoogleAuthRoute = AuthGoogleAuthRouteImport.update({
	id: "/auth/google-auth",
	path: "/auth/google-auth",
	getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/settings": typeof SettingsRoute;
	"/auth/google-auth": typeof AuthGoogleAuthRoute;
	"/auth/init-setting": typeof AuthInitSettingRoute;
	"/auth/password": typeof AuthPasswordRoute;
	"/auth/student-id": typeof AuthStudentIdRoute;
}
export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/settings": typeof SettingsRoute;
	"/auth/google-auth": typeof AuthGoogleAuthRoute;
	"/auth/init-setting": typeof AuthInitSettingRoute;
	"/auth/password": typeof AuthPasswordRoute;
	"/auth/student-id": typeof AuthStudentIdRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/": typeof IndexRoute;
	"/settings": typeof SettingsRoute;
	"/auth/google-auth": typeof AuthGoogleAuthRoute;
	"/auth/init-setting": typeof AuthInitSettingRoute;
	"/auth/password": typeof AuthPasswordRoute;
	"/auth/student-id": typeof AuthStudentIdRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/settings" | "/auth/google-auth" | "/auth/init-setting" | "/auth/password" | "/auth/student-id";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/settings" | "/auth/google-auth" | "/auth/init-setting" | "/auth/password" | "/auth/student-id";
	id:
		| "__root__"
		| "/"
		| "/settings"
		| "/auth/google-auth"
		| "/auth/init-setting"
		| "/auth/password"
		| "/auth/student-id";
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	SettingsRoute: typeof SettingsRoute;
	AuthGoogleAuthRoute: typeof AuthGoogleAuthRoute;
	AuthInitSettingRoute: typeof AuthInitSettingRoute;
	AuthPasswordRoute: typeof AuthPasswordRoute;
	AuthStudentIdRoute: typeof AuthStudentIdRoute;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/settings": {
			id: "/settings";
			path: "/settings";
			fullPath: "/settings";
			preLoaderRoute: typeof SettingsRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/auth/student-id": {
			id: "/auth/student-id";
			path: "/auth/student-id";
			fullPath: "/auth/student-id";
			preLoaderRoute: typeof AuthStudentIdRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/auth/password": {
			id: "/auth/password";
			path: "/auth/password";
			fullPath: "/auth/password";
			preLoaderRoute: typeof AuthPasswordRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/auth/init-setting": {
			id: "/auth/init-setting";
			path: "/auth/init-setting";
			fullPath: "/auth/init-setting";
			preLoaderRoute: typeof AuthInitSettingRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/auth/google-auth": {
			id: "/auth/google-auth";
			path: "/auth/google-auth";
			fullPath: "/auth/google-auth";
			preLoaderRoute: typeof AuthGoogleAuthRouteImport;
			parentRoute: typeof rootRouteImport;
		};
	}
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	SettingsRoute: SettingsRoute,
	AuthGoogleAuthRoute: AuthGoogleAuthRoute,
	AuthInitSettingRoute: AuthInitSettingRoute,
	AuthPasswordRoute: AuthPasswordRoute,
	AuthStudentIdRoute: AuthStudentIdRoute,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
